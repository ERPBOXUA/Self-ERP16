from odoo import fields, Command
from odoo.tests import tagged

from odoo.addons.account_reports.tests.common import TestAccountReportsCommon


@tagged('post_install', '-at_install')
class TestFinancialReportBalanceSheet(TestAccountReportsCommon):
    
    @classmethod
    def setUpClass(cls, chart_template_ref=None):
        if not chart_template_ref:
            chart_template_ref = 'l10n_ua.l10n_ua_psbo_chart_template'
        super().setUpClass(chart_template_ref=chart_template_ref)

        cls.report_bs_1 = cls.env.ref('selferp_l10n_ua_finance_report.account_report_l10n_ua_balance_sheet_1')
        cls.report_bs_1m = cls.env.ref('selferp_l10n_ua_finance_report.account_report_l10n_ua_balance_sheet_1m')
        cls.report_fr_2 = cls.env.ref('selferp_l10n_ua_finance_report.account_report_l10n_ua_financial_results_2')
        cls.report_fr_2m = cls.env.ref('selferp_l10n_ua_finance_report.account_report_l10n_ua_financial_results_2m')

        cls.company_id = cls.company_data['company'].id
        cls.date_move = fields.Date.from_string('2023-12-02')

        moves = (
            (('121000', '910000'), 121),
            (('133000', '910000'), 133),
            (('151000', '910000'), 151),
            (('101000', '910000'), 101),
            (('100000', '910000'), 100),
            (('111000', '910000'), 111),
            (('131000', '910000'), 131),
            (('132000', '910000'), 132),
            (('135000', '910000'), 135),
            (('161000', '910000'), 161),
            (('134000', '910000'), 134),
            (('141000', '910000'), 141),
            (('142000', '910000'), 143),
            (('143000', '910000'), 143),
            (('181000', '910000'), 181),
            (('184000', '910000'), 184),
            (('170000', '910000'), 170),
            (('191000', '910000'), 191),
            (('200000', '910000'), 200),
            (('220000', '910000'), 220),
            (('231000', '910000'), 231),
            (('240000', '910000'), 240),
            (('250000', '910000'), 250),
            (('260000', '910000'), 260),
            (('270000', '910000'), 270),
            (('280000', '910000'), 280),
            (('286000', '910000'), 286),
            (('211000', '910000'), 211),
            (('361000', '910000'), 361),
            (('362000', '910000'), 362),
            (('363000', '910000'), 363),
            (('341000', '910000'), 341),
            (('381000', '910000'), 381),
            (('383000', '910000'), 383),
            (('631000', '910000'), 631),
            (('632000', '910000'), 632),
            (('382000', '910000'), 382),
            (('641100', '910000'), 6411),
            (('642000', '910000'), 642),
            (('641300', '910000'), 6413),
            (('384000', '910000'), 384),
            (('385000', '910000'), 385),
            (('386000', '910000'), 386),
            (('371100', '910000'), 3711),
            (('651000', '910000'), 651),
            (('680000', '910000'), 680),
            (('684000', '910000'), 684),
            (('681100', '910000'), 6811),
            (('352000', '910000'), 352),
            (('301001', '910000'), 301),
            (('311000', '910000'), 311),
            (('331000', '910000'), 331),
            (('332000', '910000'), 332),
            (('333000', '910000'), 333),
            (('351100', '910000'), 3511),
            (('390000', '910000'), 390),
            (('331000', '910000'), 331),
            (('332000', '910000'), 332),
            (('643100', '910000'), 6431),
            (('644100', '910000'), 6441),
            (('910000', '401000'), 401),
            (('910000', '411000'), 411),
            (('910000', '421000'), 421),
            (('910000', '430000'), 430),
            (('910000', '441000'), 441),
            (('910000', '701000'), 701),
            (('910000', '901000'), 901),
            (('910000', '460000'), 460),
            (('910000', '451000'), 451),
            (('910000', '540000'), 540),
            (('910000', '501000'), 501),
            (('910000', '505000'), 505),
            (('910000', '506000'), 506),
            (('910000', '511000'), 511),
            (('910000', '521000'), 521),
            (('910000', '531000'), 531),
            (('910000', '550000'), 550),
            (('910000', '471000'), 471),
            (('910000', '481000'), 481),
            (('910000', '601000'), 601),
            (('910000', '611000'), 611),
            (('910000', '621000'), 621),
            (('910000', '633000'), 633),
            (('910000', '661000'), 661),
            (('910000', '690000'), 690),
            (('910000', '702000'), 702),
            (('910000', '703000'), 703),
            (('704000', '910000'), 704),
            (('901000', '910000'), 901),
            (('910000', '710000'), 710),
            (('920000', '910000'), 92),
            (('930000', '910000'), 93),
            (('940000', '910000'), 94),
            (('910000', '721000'), 721),
            (('910000', '731000'), 731),
            (('910000', '740000'), 740),
            (('951000', '910000'), 951),
            (('951000', '910000'), 951),
            (('961000', '910000'), 961),
            (('970000', '910000'), 970),
            (('981000', '910000'), 98),
            (('910000', '412000'), 412),
            (('910000', '414000'), 414, ('FR2500', '')),
            (('910000', '413000'), 413, ('FR2505', '')),
            (('910000', '423000'), 423, ('FR2510', '')),
            (('910000', '424000'), 424, ('FR2515', '')),
            (('910000', '425000'), 425, ('FR2520', '')),
        )
        cls._create_account_moves(moves)

    @classmethod
    def _create_account_moves(cls, moves):
        lines = []
        for move in moves:
            db_account = cls.env['account.account'].search(
                [('company_id', '=', cls.company_id), ('code', '=', move[0][0])],
                limit=1,
            )
            cr_account = cls.env['account.account'].search(
                [('company_id', '=', cls.company_id), ('code', '=', move[0][1])],
                limit=1,
            )

            analytic_lines_cr = []
            analytic_lines_db = []
            if len(move) == 3 and move[2] and move[2][0]:
                analytic_account = cls.env['account.analytic.account'].search(
                    [('company_id', '=', cls.company_id), ('code', '=', move[2][0])],
                    limit=1,
                )
                analytic_lines_db = [
                    Command.create(
                        {'name': move[2][0], 'account_id': analytic_account.id, 'amount': move[1]},
                    )
                ]
            if len(move) == 3 and move[2] and move[2][1]:
                analytic_account = cls.env['account.analytic.account'].search(
                    [('company_id', '=', cls.company_id), ('code', '=', move[2][1])],
                    limit=1,
                )
                analytic_lines_cr = [
                    Command.create(
                        {'name': move[2][1], 'account_id': analytic_account.id, 'amount': move[1]},
                    )
                ]

            lines += [
                Command.create(
                    {'debit': move[1], 'account_id': db_account.id, 'analytic_line_ids': analytic_lines_db},
                ),
                Command.create(
                    {'credit': move[1], 'account_id': cr_account.id, 'analytic_line_ids': analytic_lines_cr},
                ),
            ]

        account_move = cls.env['account.move'].create(
            {
                'move_type': 'entry',
                'date': cls.date_move,
                'line_ids': lines,
            }
        )
        account_move.action_post()

    def test_balance_sheet_1(self):
        options = self._generate_options(
            self.report_bs_1, 
            fields.Date.from_string('2023-12-01'), 
            fields.Date.from_string('2023-12-31'),
        )
        lines = self.report_bs_1._get_lines(options)
        self.assertLinesValues(
            lines,
            #   Name,   CodeLine,   Balance
            [0, 1, 2],
            [
                ('І. Необоротні активи', 1095, 2563),
                ('Нематеріальні активи', 1000, 254),
                ('Первісна вартість', 1001, 121),
                ('Накопичена амортизація', 1002, 133),
                ('Незавершені капітальні інвестиції', 1005, 151),
                ('Основні засоби', 1010, 475),
                ('первісна вартість', 1011, 212),
                ('знос', 1012, 263),
                ('Інвестиційна нерухомість', 1015, 235),
                ('Довгострокові біологічні активи', 1020, 295),
                (
                    'Довгострокові фінансові інвестиції: які обліковуються за методом участі в капіталі інших підприємств',
                    1030,
                    141,
                ),
                ('інші фінансові інвестиції', 1035, 286),
                ('Довгострокoва дебіторська заборгованість', 1040, 181),
                ('Відстрочені податкові активи', 1045, 170),
                ('Інші необоротні активи', 1090, 375),
                ('Total І. Необоротні активи', 1095, 2563),
                ('II. Оборотні активи', 1195, 46586),
                ('Запаси', 1100, 1951),
                ('Виробничі запаси', 1101, 660),
                ('Незавершене виробництво', 1102, 481),
                ('Готова продукція', 1103, 530),
                ('Товари', 1104, 280),
                ('Поточні біологічні активи', 1110, 211),
                ('Дебіторська заборгованість зa продукцію, товари, роботи, пoслуги', 1125, 1046),
                ('Дебіторська заборгованість за pозрахунками зa виданими авансами', 1130, 880),
                ('Дебіторська заборгованість за pозрахунками з бюджетом', 1135, 13084),
                ('у тому чиcлі з податку на пpибуток', 1136, 6413),
                ('Інша поточна дебіторська зaборгованість', 1155, 10018),
                ('Поточні фінансові інвестиції', 1160, 352),
                ('Гроші тa їх еквіваленти', 1165, 4456),
                ('Bитрати майбутніх періодів', 1170, 390),
                ('Інші оборотні активи', 1190, 14198),
                ('Total II. Оборотні активи', 1195, 46586),
                ('III. Необoротні активи, утримувані для пpодажу, та групи вибуття', 1200, 286),
                ('Баланс', 1300, 49435),
                ('I. Влaсний капітал', 1495, 4700),
                ('Зареєстрований (пайовий) капітал', 1400, 401),
                ('Капітал у дооцінках', 1405, 1650),
                ('Додатковий капітал', 1410, 1693),
                ('Резервний капітал', 1415, 430),
                ('Нерозподілений пpибуток (непокритий збиток)', 1420, 535),
                ('Неоплачений капітал', 1425, 460),
                ('Вилучений капітал', 1430, 451),
                ('Total I. Влaсний капітал', 1495, 4700),
                ('II. Дoвгострокові зобов\'язання, цільове фінансування та забезпечення', 1595, 5117),
                ('Відстрочені податкові зобов’язання', 1500, 540),
                ('Довгострокові кредити банків', 1510, 501),
                ('Інші довгострокові зобов’язання', 1515, 3124),
                ('Довгострокові забезпечення', 1520, 471),
                ('Цільове фінансування', 1525, 481),
                ('Total II. Дoвгострокові зобов\'язання, цільове фінансування та забезпечення', 1595, 5117),
                ('III. Пoточні зобов\'язання', 1695, 3133),
                ('Короткострокові кредити банків', 1600, -83),
                ('Поточна кредиторська заборгованість за: довгостроковими зобов’язаннями', 1610, 611),
                ('товари, роботи, послуги', 1615, 1254),
                ('- розрахунками з бюджетом', 1620, ''),
                ('— у тому числі з податку на прибуток', 1621, ''),
                ('— розрахунками зі страхування', 1625, ''),
                ('— розрахунками з оплати праці', 1630, 661),
                ('Поточні забезпечення', 1660, ''),
                ('Доходи майбутніх періодів', 1665, 690),
                ('Інші пoточні зобов\'язання', 1690, ''),
                ('Total III. Пoточні зобов\'язання', 1695, 3133),
                (
                    'IV. Зобов\'язання, пoв\'язані з необоротними активами, yтримуваними для продажу, та гpупами вибуття',
                    1700,
                    -680,
                ),
                ('Баланс', 1900, 12270),
            ],
        )

    def test_balance_sheet_1m(self):
        options = self._generate_options(
            self.report_bs_1m,
            fields.Date.from_string('2023-12-01'),
            fields.Date.from_string('2023-12-31'),
        )
        lines = self.report_bs_1m._get_lines(options)
        self.assertLinesValues(
            lines,
            #   Name,   CodeLine,   Balance
            [0, 1, 2],
            [
                ('І. Необоротні активи', 1095, 2563),
                ('Нематеріальні активи', 1000, 254),
                ('Первісна вартість', 1001, 121),
                ('Накопичена амортизація', 1002, 133),
                ('Незавершені капітальні інвестиції', 1005, 151),
                ('Основні засоби', 1010, 710),
                ('первісна вартість', 1011, 312),
                ('знос', 1012, 398),
                ('Довгострокові біологічні активи', 1020, 295),
                ('Довгострокові фінансові інвестиції', 1030, 427),
                ('Інші необоротні активи', 1090, 726),
                ('Total І. Необоротні активи', 1095, 2563),
                ('II. Оборотні активи', 1195, 46586),
                ('Запаси', 1100, 1951),
                ('у тому чиcлі готова продукція', 1103, 810),
                ('Поточні біологічні активи', 1110, 211),
                ('Дебіторська заборгованість зa продукцію, товари, роботи, пoслуги', 1125, -874),
                ('Дебіторська заборгованість за pозрахунками з бюджетом', 1135, 14117),
                ('у тому чиcлі з податку на пpибуток', 1136, 6413),
                ('Інша поточна дебіторська зaборгованість', 1155, 11785),
                ('Поточні фінансові інвестиції', 1160, 352),
                ('Гроші тa їх еквіваленти', 1165, 4456),
                ('Bитрати майбутніх періодів', 1170, 390),
                ('Інші оборотні активи', 1190, 14198),
                ('Total II. Оборотні активи', 1195, 46586),
                ('III. Необoротні активи, утримувані для пpодажу, та групи вибуття', 1200, 286),
                ('Баланс', 1300, 49435),
                ('I. Влaсний капітал', 1495, 3798),
                ('Зареєстрований (пайовий) капітал', 1400, 401),
                ('Додатковий капітал', 1410, 3343),
                ('Резервний капітал', 1415, 430),
                ('Нерозподілений пpибуток (непокритий збиток)', 1420, 535),
                ('Неоплачений капітал', 1425, 911),
                ('Total I. Влaсний капітал', 1495, 3798),
                ('II. Дoвгострокові зобов\'язання, цільове фінансування та забезпечення', 1595, 4577),
                ('III. Пoточні зобов\'язання', 1695, 3133),
                ('Короткострокові кредити банків', 1600, -83),
                ('Поточна кредиторська заборгованість зa: довгостроковими зобов\'язаннями', 1610, 611),
                ('товари, роботи, послуги', 1615, 1254),
                ('розрахунками з бюджетом', 1620, ''),
                ('у тому числi з податку на прибуток', 1621, ''),
                ('розрахунками зі страхування', 1625, ''),
                ('розрахунками з oплати праці', 1630, 661),
                ('Доходи майбутніх періодів', 1665, 690),
                ('Інші пoточні зобов\'язання', 1690, ''),
                ('Total III. Пoточні зобов\'язання', 1695, 3133),
                (
                    'IV. Зобов\'язання, пoв\'язані з необоротними активами, yтримуваними для продажу, та гpупами вибуття',
                    1700,
                    -680,
                ),
                ('Баланс', 1900, 10828),
            ],
        )

    def test_financial_results_2_balance(self):
        options = self._generate_options(
            self.report_fr_2, 
            fields.Date.from_string('2023-12-01'), 
            fields.Date.from_string('2023-12-31'),
        )
        lines = self.report_fr_2._get_lines(options)

        self.assertLinesValues(
            lines,
            #   Name,   CodeLine,   Balance
            [0, 1, 2],
            [
                ('І. «Фінансові результати»', '', ''),
                ('Чистий дохід від реалізації продукції (товарів, робіт, послуг)', 2000, 2810),
                ('Собівартість реалізованої продукції (товарів, робіт, послуг)', 2050, -901),
                ('Валовий', '', ''),
                ('прибуток', 2090, 1909),
                ('збиток', 2095, ''),
                ('Інші операційні доходи', 2120, 710),
                ('Адміністративні витрати', 2130, -92),
                ('Витрати на збут', 2150, -93),
                ('Інші операційні витрати', 2180, ''),
                ('Фінансовий результат від операційної діяльності:', '', ''),
                ('прибуток', 2190, 2434),
                ('збиток', 2195, ''),
                ('Дохід від участі в капіталі', 2200, 721),
                ('Інші фінансові доходи', 2220, 731),
                ('Інші доходи', 2240, 740),
                ('Фінансові витрати', 2250, -1902),
                ('Втрати від участі в капіталі', 2255, -961),
                ('Інші витрати', 2270, -970),
                ('Фінансовий результат до оподаткування: ', '', ''),
                ('прибуток', 2290, 793),
                ('збиток', 2295, ''),
                ('Витрати (дохід) з податку на прибуток', 2300, -98),
                ('Чистий фінансовий результат:', '', ''),
                ('прибуток', 2350, 695),
                ('збиток', 2355, ''),
                ('ІІ. «Сукупний дохід»', '', ''),
                ('Дооцінка (уцінка) необоротних активів', 2400, 1237),
                ('Дооцінка (уцінка) фінансових інструментів', 2405, 413),
                ('Накопичені курсові різниці', 2410, 423),
                ('Частка іншого сукупного доходу асоційованих та спільних підприємств', 2415, ''),
                ('Інший сукупний дохід', 2445, 849),
                ('Інший сукупний дохід дo оподаткування', 2450, 2922),
                ('Податок на прибуток, пов’язаний з іншим сукупним доходом', 2455, ''),
                ('Інший сукупний дохід після оподаткування', 2460, 2922),
                ('Сукупний дохід', 2465, 3617),
                ('ІІІ. «Елементи операцiйних витрат»', '', ''),
                ('Матеріальні затрати', 2500, 414),
                ('Витрати на оплату праці', 2505, 413),
                ('Відрахування на соціальні заходи', 2510, 423),
                ('Амортизація', 2515, 424),
                ('Iнші операційні витрати', 2520, 425),
                ('Разом', 2550, 2099),
            ],
        )

    def test_financial_results_2m_balance(self):
        options = self._generate_options(
            self.report_fr_2m, 
            fields.Date.from_string('2023-12-01'), 
            fields.Date.from_string('2023-12-31'),
        )
        lines = self.report_fr_2m._get_lines(options)
        self.assertLinesValues(
            lines,
            #   Name,   CodeLine,   Balance
            [0, 1, 2],
            [
                ('Чистий дохід від реалізації продукції (товарів, робіт, послуг)', 2000, 2810),
                ('Інші доходи', 2160, 2902),
                ('Разом доходи', 2280, 5712),
                ('Собівартість реалізованої продукції (товарів, робіт, послуг)', 2050, 901),
                ('Інші витрати', 2165, ''),
                ('Разом витрати', 2285, 901),
                ('Фінансовий результат до оподаткування', 2290, 4811),
                ('Податок на прибуток', 2300, 98),
                ('Чистий прибуток (збиток)', 2350, 4713),
            ],
        )
