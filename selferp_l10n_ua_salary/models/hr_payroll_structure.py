from odoo import models, fields, api, Command, _


class HrPayrollStructure(models.Model):
    _inherit = 'hr.payroll.structure'

    @api.model
    def _get_default_rule_ids(self):

        def _find_income_feature_code_id(code):
            today = fields.Date.today()
            income_feature_code = self.env['hr.employee.income_feature_code'].search([
                ('code', '=', code),
                ('begin_date', '<=', today),
                '|',
                ('end_date', '>', today),
                ('end_date', '=', False),
            ])
            return income_feature_code and income_feature_code[0].id or None

        force_income_feature_code = self.env.context.get('force_income_feature_code') or '101'
        if force_income_feature_code:
            income_feature_code_id = _find_income_feature_code_id(force_income_feature_code)
        else:
            income_feature_code_id = None
        income_feature_code_id_128 = _find_income_feature_code_id('128')
        income_feature_code_id_140 = _find_income_feature_code_id('140')
        income_feature_code_id_169 = _find_income_feature_code_id('169')
        # TODO: Refactor it when all rules of default structure will be ready
        return [
            Command.create({
                'name': _("Advance Salary"),
                'sequence': 10,
                'code': 'ADV_PAID',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_ADVANCE_PAYSLIP',
                'amount_select': 'code',
                'amount_python_compute': 'result = -payslip.dict.adv_paid()',
            }),
            Command.create({
                'name': _("Advance Salary - ESV"),
                'sequence': 11,
                'code': 'ADV_ESV_PAID',
                'category_id': self.env.ref('selferp_l10n_ua_salary.ESV').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_ADVANCE_PAYSLIP',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.adv_esv()',
            }),
            Command.create({
                'name': _("Advance Salary - PDFO"),
                'sequence': 12,
                'code': 'ADV_PDFO_PAID',
                'category_id': self.env.ref('selferp_l10n_ua_salary.PDFO').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_ADVANCE_PAYSLIP',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.adv_pdfo()',
            }),
            Command.create({
                'name': _("Advance Salary - MT"),
                'sequence': 13,
                'code': 'ADV_MT_PAID',
                'category_id': self.env.ref('selferp_l10n_ua_salary.MT').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_ADVANCE_PAYSLIP',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.adv_mt()',
            }),
            Command.create({
                'name': _("Basic Salary"),
                'sequence': 50,
                'code': 'BASIC',
                'category_id': self.env.ref('hr_payroll.BASIC').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary"',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.get_basic_wage()',
                'income_feature_code_id': False,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Project - ESV"),
                'sequence': 51,
                'code': 'PROJECT_ESV',
                'category_id': self.env.ref('selferp_l10n_ua_salary.ESV').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and TIMESHEET_BASED_SALARY',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.add_projects_esv()',
                'account_debit_code': '910000',
                'account_credit_code': '651000',
            }),
            Command.create({
                'name': _("Project - PDFO"),
                'sequence': 52,
                'code': 'PROJECT_PDFO',
                'category_id': self.env.ref('selferp_l10n_ua_salary.PDFO').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and TIMESHEET_BASED_SALARY',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.add_projects_pdfo()',
                'account_debit_code': '661000',
                'account_credit_code': '641100',
            }),
            Command.create({
                'name': _("Project - MT"),
                'sequence': 53,
                'code': 'PROJECT_MT',
                'category_id': self.env.ref('selferp_l10n_ua_salary.MT').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and TIMESHEET_BASED_SALARY',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.add_projects_mt()',
                'account_debit_code': '661000',
                'account_credit_code': '642000',
            }),
            Command.create({
                'name': _("Business Trip"),
                'sequence': 55,
                'code': 'BUSINESS_TRIP',
                'category_id': self.env.ref('hr_payroll.ALW').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and BUSINESS_TRIP_DAYS',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.get_business_trip_salary()',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Work On Day Off"),
                'sequence': 57,
                'code': 'WORK_DAY_OFF',
                'category_id': self.env.ref('hr_payroll.ALW').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and DAY_OFF_WORKING_DAYS',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.get_work_on_day_off_salary()',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Work In The Evening"),
                'sequence': 59,
                'code': 'WORK_EVENING',
                'category_id': self.env.ref('hr_payroll.ALW').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and payslip.dict.has_evening_working_hours()',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.get_evening_work_salary()',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Work At Night"),
                'sequence': 61,
                'code': 'WORK_NIGHT',
                'category_id': self.env.ref('hr_payroll.ALW').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and payslip.dict.has_night_working_hours()',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.get_night_work_salary()',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Salary Indexation"),
                'sequence': 78,
                'code': 'SALARY_INDEXATION',
                'category_id': self.env.ref('hr_payroll.ALW').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and payslip.dict.is_indexation_needed()',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.get_salary_indexation()',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Supplement To Minimum Wage"),
                'sequence': 80,
                'code': 'SUPP_MIN_WAGE',
                'category_id': self.env.ref('hr_payroll.ALW').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and payslip.dict.is_supplement_to_min_wage_needed()',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.get_supplement_to_min_wage()',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Charity Gross"),
                'sequence': 82,
                'code': 'CHARITY',
                'category_id': self.env.ref('selferp_l10n_ua_salary.TECHNICAL').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_CHARITY',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.add_charity()',
                'income_feature_code_id': income_feature_code_id_169,
                'report_kind': 'income',
                'account_debit_code': '949000',
                'account_credit_code': '661000',
            }),
            Command.create({
                'name': _("Charity - PDFO"),
                'sequence': 83,
                'code': 'CHARITY_PDFO',
                'category_id': self.env.ref('selferp_l10n_ua_salary.PDFO').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_CHARITY and payslip.dict.get_charity_taxable() > 0.0',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(payslip.dict.get_charity_taxable() * 0.18)',
                'income_feature_code_id': income_feature_code_id_169,
                'report_kind': 'income',
                'account_debit_code': '661000',
                'account_credit_code': '641100',
            }),
            Command.create({
                'name': _("Charity - MT"),
                'sequence': 83,
                'code': 'CHARITY_MT',
                'category_id': self.env.ref('selferp_l10n_ua_salary.MT').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_CHARITY and payslip.dict.get_charity_taxable() > 0.0',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(payslip.dict.get_charity_taxable() * 0.015)',
                'income_feature_code_id': income_feature_code_id_169,
                'report_kind': 'income',
                'account_debit_code': '661000',
                'account_credit_code': '642000',
            }),
            Command.create({
                'name': _("Charity - NET"),
                'sequence': 84,
                'code': 'CHARITY_NET',
                'category_id': self.env.ref('selferp_l10n_ua_salary.TECHNICAL').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_CHARITY',
                'amount_select': 'code',
                'amount_python_compute': 'result = CHARITY + CHARITY_PDFO + CHARITY_MT',
                'income_feature_code_id': income_feature_code_id_169,
                'report_kind': False,
            }),
            Command.create({
                'name': _("Accruals"),
                'sequence': 88,
                'code': 'ACCRUAL',
                'category_id': self.env.ref('hr_payroll.ALW').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_ACCRUALS',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.add_accruals()',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Bonus"),
                'sequence': 90,
                'code': 'BONUS',
                'category_id': self.env.ref('hr_payroll.ALW').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_BONUS',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.add_bonus()',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Gross"),
                'sequence': 100,
                'code': 'GROSS',
                'category_id': self.env.ref('hr_payroll.GROSS').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary"',
                'amount_select': 'code',
                'amount_python_compute': 'result = categories.BASIC + categories.ALW',
                'account_debit_code': '910000',
                'account_credit_code': '661000',
            }),
            Command.create({
                'name': _("Tax Social Benefit"),
                'sequence': 105,
                'code': 'TAX_SOCIAL_BENEFIT',
                'category_id': self.env.ref('hr_payroll.ALW').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and payslip.dict.is_tax_social_benefit_needed()',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.get_tax_social_benefit()',
            }),
            Command.create({
                'name': _("Salary - ESV"),
                'sequence': 110,
                'code': 'ESV',
                'category_id': self.env.ref('selferp_l10n_ua_salary.ESV').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary"',
                'amount_select': 'code',
                'amount_python_compute': '''
rate = 0.0841 if employee.has_actual_disability_group(payslip.date_from) else 0.22
result = round(payslip.dict.fix_esv_base(GROSS) * rate)''',
                'account_debit_code': '910000',
                'account_credit_code': '651000',
            }),
            Command.create({
                'name': _("Salary - ESV (Supplement to min. wage)"),
                'sequence': 111,
                'code': 'ESV_SMW',
                'category_id': self.env.ref('selferp_l10n_ua_salary.ESV').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and payslip.dict.is_supplement_to_min_wage_needed() and SUPP_MIN_WAGE > 0.0',
                'amount_select': 'code',
                'amount_python_compute': '''
rate = 0.0841 if employee.has_actual_disability_group(payslip.date_from) else 0.22
result = round(SUPP_MIN_WAGE * rate)''',
                'report_kind': 'esv',
            }),
            Command.create({
                'name': _("Salary - PDFO"),
                'sequence': 112,
                'code': 'PDFO',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary"',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round((GROSS - TAX_SOCIAL_BENEFIT) * 0.18) if GROSS > TAX_SOCIAL_BENEFIT else 0.0',
                'account_debit_code': '661000',
                'account_credit_code': '641100',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'pdfo',
            }),
            Command.create({
                'name': _("Salary - MT"),
                'sequence': 113,
                'code': 'MT',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary"',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(GROSS * 0.015)',
                'account_debit_code': '661000',
                'account_credit_code': '642000',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'mt',
            }),
            Command.create({
                'name': _("Salary - ESV Base (When applying the supplement to the min. wage)"),
                'sequence': 119,
                'code': 'ESV_SMW_DIFF',
                'category_id': self.env.ref('selferp_l10n_ua_salary.ESV').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and payslip.dict.is_supplement_to_min_wage_needed() and SUPP_MIN_WAGE > 0.0 and ESV_SMW > 0.0 and ESV > ESV_SMW',
                'amount_select': 'code',
                'amount_python_compute': 'result = round(ESV - ESV_SMW)',
                'report_kind': 'esv',
            }),
            Command.create({
                'name': _("Salary - ESV Final"),
                'sequence': 120,
                'code': 'ESV_FINAL',
                'category_id': self.env.ref('selferp_l10n_ua_salary.ESV').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary"',
                'amount_select': 'code',
                'amount_python_compute': 'result = ESV - ADV_ESV_PAID',
            }),
            Command.create({
                'name': _("Salary - PDFO Final"),
                'sequence': 121,
                'code': 'PDFO_FINAL',
                'category_id': self.env.ref('selferp_l10n_ua_salary.PDFO').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary"',
                'amount_select': 'code',
                'amount_python_compute': 'result = PDFO + CHARITY_PDFO - ADV_PDFO_PAID',
            }),
            Command.create({
                'name': _("Salary - MT Final"),
                'sequence': 122,
                'code': 'MT_FINAL',
                'category_id': self.env.ref('selferp_l10n_ua_salary.MT').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary"',
                'amount_select': 'code',
                'amount_python_compute': 'result = MT + CHARITY_MT - ADV_MT_PAID',
            }),
            Command.create({
                'name': _("Sick leaves - Technical"),
                'sequence': 150,
                'code': 'SICK_LEAVES_TECHNICAL',
                'category_id': self.env.ref('selferp_l10n_ua_salary.TECHNICAL').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_ALIMONY',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.get_sick_leaves_technical()',
            }),
            Command.create({
                'name': _("Vacations - Technical"),
                'sequence': 150,
                'code': 'VACATIONS_TECHNICAL',
                'category_id': self.env.ref('selferp_l10n_ua_salary.TECHNICAL').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_ALIMONY',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.get_vacations_technical()',
            }),
            Command.create({
                'name': _("Net Salary Without Deductions"),
                'sequence': 180,
                'code': 'NET_TECHNICAL',
                'appears_on_employee_cost_dashboard': True,
                'category_id': self.env.ref('selferp_l10n_ua_salary.TECHNICAL').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and (HAS_ALIMONY or HAS_DEDUCTIONS)',
                'amount_select': 'code',
                'amount_python_compute': 'result = GROSS + CHARITY_NET + ADV_PAID + PDFO + MT + SICK_LEAVES_TECHNICAL + VACATIONS_TECHNICAL',
            }),
            Command.create({
                'name': _("Alimony"),
                'sequence': 183,
                'code': 'ALIMONY',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_ALIMONY',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.add_alimony()',
                'account_debit_code': '661000',
                'account_credit_code': '685000',
                'income_feature_code_id': income_feature_code_id_140,
            }),
            Command.create({
                'name': _("Deductions"),
                'sequence': 188,
                'code': 'CUSTOM_DEDUCTIONS',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary" and HAS_DEDUCTIONS',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.add_deductions()',
            }),
            Command.create({
                'name': _("Net Salary"),
                'sequence': 210,
                'code': 'NET',
                'appears_on_employee_cost_dashboard': True,
                'category_id': self.env.ref('hr_payroll.NET').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "salary"',
                'amount_select': 'code',
                'amount_python_compute': 'result = GROSS + CHARITY_NET + ADV_PAID + PDFO + MT + ALIMONY + CUSTOM_DEDUCTIONS',
            }),
            Command.create({
                'name': _("Advance Salary - Gross"),
                'sequence': 220,
                'code': 'ADV_GROSS',
                'category_id': self.env.ref('hr_payroll.GROSS').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "advance_salary"',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.adv_salary()',
            }),
            Command.create({
                'name': _("Advance Salary - ESV"),
                'sequence': 230,
                'code': 'ADV_ESV',
                'category_id': self.env.ref('selferp_l10n_ua_salary.ESV').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "advance_salary"',
                'amount_select': 'code',
                'amount_python_compute': '''
rate = 0.0841 if employee.has_actual_disability_group(payslip.date_from) else 0.22
result = round(ADV_GROSS * rate)''',
            }),
            Command.create({
                'name': _("Advance Salary - PDFO"),
                'sequence': 240,
                'code': 'ADV_PDFO',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "advance_salary"',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(ADV_GROSS * 0.18)',
            }),
            Command.create({
                'name': _("Advance Salary - MT"),
                'sequence': 250,
                'code': 'ADV_MT',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "advance_salary"',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(ADV_GROSS * 0.015)',
            }),
            Command.create({
                'name': _("Advance Salary - Net"),
                'sequence': 260,
                'code': 'ADV_NET',
                'category_id': self.env.ref('hr_payroll.NET').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "advance_salary"',
                'amount_select': 'code',
                'amount_python_compute': 'result = ADV_GROSS + ADV_PDFO + ADV_MT',
            }),
            Command.create({
                'name': _("Vacations Salary - Gross"),
                'sequence': 270,
                'code': 'VACATIONS_GROSS',
                'category_id': self.env.ref('hr_payroll.GROSS').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "vacations"',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.vacations_salary()',
                'account_credit_code': '661000',
                'use_employee_expense_account': True,
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Vacations Salary - ESV"),
                'sequence': 280,
                'code': 'VACATIONS_ESV',
                'category_id': self.env.ref('selferp_l10n_ua_salary.ESV').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "vacations"',
                'amount_select': 'code',
                'amount_python_compute': '''
rate = 0.0841 if employee.has_actual_disability_group(payslip.date_from) else 0.22
result = round(VACATIONS_GROSS * rate)''',
                'account_credit_code': '651000',
                'use_employee_expense_account': True,
                'report_kind': 'esv',
            }),
            Command.create({
                'name': _("Vacations Salary - PDFO"),
                'sequence': 290,
                'code': 'VACATIONS_PDFO',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "vacations"',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(VACATIONS_GROSS * 0.18)',
                'account_debit_code': '661000',
                'account_credit_code': '641100',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'pdfo',
            }),
            Command.create({
                'name': _("Vacations Salary - MT"),
                'sequence': 300,
                'code': 'VACATIONS_MT',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "vacations"',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(VACATIONS_GROSS * 0.015)',
                'account_debit_code': '661000',
                'account_credit_code': '642000',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'mt',
            }),
            Command.create({
                'name': _("Vacations Salary - Net"),
                'sequence': 310,
                'code': 'VACATIONS_NET',
                'category_id': self.env.ref('hr_payroll.NET').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "vacations"',
                'amount_select': 'code',
                'amount_python_compute': 'result = VACATIONS_GROSS + VACATIONS_PDFO + VACATIONS_MT',
            }),
            Command.create({
                'name': _("Sick Leaves Salary (Employer) - Gross"),
                'sequence': 320,
                'code': 'SICK_LEAVES_EMP_GROSS',
                'category_id': self.env.ref('hr_payroll.GROSS').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and not MATERNITY_LEAVE',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.sick_leaves_salary()',
                'account_debit_code': '949000',
                'account_credit_code': '663000',
                'use_employee_expense_account': False,
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Sick Leaves Salary (CIF) - Gross"),
                'sequence': 325,
                'code': 'SICK_LEAVES_CIF_GROSS',
                'category_id': self.env.ref('hr_payroll.GROSS').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and not MATERNITY_LEAVE and payslip.dict.is_sick_leaves_cif_applicable()',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.sick_leaves_salary_cif()',
                'account_debit_code': '378000',
                'account_credit_code': '663000',
                'use_employee_expense_account': False,
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Maternity Leaves Salary - Gross"),
                'sequence': 325,
                'code': 'MATERNITY_LEAVES_GROSS',
                'category_id': self.env.ref('hr_payroll.GROSS').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and MATERNITY_LEAVE',
                'amount_select': 'code',
                'amount_python_compute': 'result = payslip.dict.maternity_salary()',
                'account_debit_code': '378000',
                'account_credit_code': '663000',
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'income',
            }),
            Command.create({
                'name': _("Sick Leaves Salary (Employer) - ESV"),
                'sequence': 330,
                'code': 'SICK_LEAVES_EMP_ESV',
                'category_id': self.env.ref('selferp_l10n_ua_salary.ESV').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and not MATERNITY_LEAVE',
                'amount_select': 'code',
                'amount_python_compute': '''
rate = 0.0841 if employee.has_actual_disability_group(payslip.date_from) else 0.22
result = round(SICK_LEAVES_EMP_GROSS * rate)''',
                'account_debit_code': '949000',
                'account_credit_code': '651000',
                'use_employee_expense_account': False,
                'report_kind': 'esv',
            }),
            Command.create({
                'name': _("Sick Leaves Salary (CIF) - ESV"),
                'sequence': 335,
                'code': 'SICK_LEAVES_CIF_ESV',
                'category_id': self.env.ref('selferp_l10n_ua_salary.ESV').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and not MATERNITY_LEAVE and payslip.dict.is_sick_leaves_cif_applicable()',
                'amount_select': 'code',
                'amount_python_compute': '''
rate = 0.0841 if employee.has_actual_disability_group(payslip.date_from) else 0.22
result = round(SICK_LEAVES_CIF_GROSS * rate)''',
                'account_debit_code': '949000',
                'account_credit_code': '651000',
                'use_employee_expense_account': False,
                'report_kind': 'esv',
            }),
            Command.create({
                'name': _("Maternity Leaves Salary - ESV"),
                'sequence': 335,
                'code': 'MATERNITY_LEAVES_ESV',
                'category_id': self.env.ref('selferp_l10n_ua_salary.ESV').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and MATERNITY_LEAVE',
                'amount_select': 'code',
                'amount_python_compute': '''
rate = 0.0841 if employee.has_actual_disability_group(payslip.date_from) else 0.22
result = round(MATERNITY_LEAVES_GROSS * rate)''',
                'account_debit_code': '949000',
                'account_credit_code': '651000',
                'report_kind': 'esv',
            }),
            Command.create({
                'name': _("Sick Leaves Salary (Employer) - PDFO"),
                'sequence': 340,
                'code': 'SICK_LEAVES_EMP_PDFO',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and not MATERNITY_LEAVE',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(SICK_LEAVES_EMP_GROSS * 0.18)',
                'account_debit_code': '663000',
                'account_credit_code': '641100',
                'use_employee_expense_account': False,
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'pdfo',
            }),
            Command.create({
                'name': _("Sick Leaves Salary (CIF) - PDFO"),
                'sequence': 345,
                'code': 'SICK_LEAVES_CIF_PDFO',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and not MATERNITY_LEAVE and payslip.dict.is_sick_leaves_cif_applicable()',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(SICK_LEAVES_CIF_GROSS * 0.18)',
                'account_debit_code': '663000',
                'account_credit_code': '641100',
                'use_employee_expense_account': False,
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'pdfo',
            }),
            Command.create({
                'name': _("Maternity Leaves Salary - PDFO"),
                'sequence': 345,
                'code': 'MATERNITY_LEAVES_PDFO',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and MATERNITY_LEAVE',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(MATERNITY_LEAVES_GROSS * 0.18)',
                'income_feature_code_id': income_feature_code_id_128,
                'report_kind': 'pdfo',
            }),
            Command.create({
                'name': _("Sick Leaves Salary (Employer) - MT"),
                'sequence': 350,
                'code': 'SICK_LEAVES_EMP_MT',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and not MATERNITY_LEAVE',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(SICK_LEAVES_EMP_GROSS * 0.015)',
                'account_debit_code': '663000',
                'account_credit_code': '642000',
                'use_employee_expense_account': False,
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'mt',
            }),
            Command.create({
                'name': _("Sick Leaves Salary (CIF) - MT"),
                'sequence': 355,
                'code': 'SICK_LEAVES_CIF_MT',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and not MATERNITY_LEAVE and payslip.dict.is_sick_leaves_cif_applicable()',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(SICK_LEAVES_CIF_GROSS * 0.015)',
                'account_debit_code': '663000',
                'account_credit_code': '642000',
                'use_employee_expense_account': False,
                'income_feature_code_id': income_feature_code_id,
                'report_kind': 'mt',
            }),
            Command.create({
                'name': _("Maternity Leaves Salary - MT"),
                'sequence': 355,
                'code': 'MATERNITY_LEAVES_MT',
                'category_id': self.env.ref('hr_payroll.DED').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and MATERNITY_LEAVE',
                'amount_select': 'code',
                'amount_python_compute': 'result = -round(MATERNITY_LEAVES_GROSS * 0.015)',
                'income_feature_code_id': income_feature_code_id_128,
                'report_kind': 'mt',
            }),
            Command.create({
                'name': _("Sick Leaves Salary (Employer) - Net"),
                'sequence': 360,
                'code': 'SICK_LEAVES_EMP_NET',
                'category_id': self.env.ref('hr_payroll.NET').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and not MATERNITY_LEAVE',
                'amount_select': 'code',
                'amount_python_compute': 'result = SICK_LEAVES_EMP_GROSS + SICK_LEAVES_EMP_PDFO + SICK_LEAVES_EMP_MT',
            }),
            Command.create({
                'name': _("Sick Leaves Salary (CIF) - Net"),
                'sequence': 365,
                'code': 'SICK_LEAVES_CIF_NET',
                'category_id': self.env.ref('hr_payroll.NET').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and not MATERNITY_LEAVE and payslip.dict.is_sick_leaves_cif_applicable()',
                'amount_select': 'code',
                'amount_python_compute': 'result = SICK_LEAVES_CIF_GROSS + SICK_LEAVES_CIF_PDFO + SICK_LEAVES_CIF_MT',
            }),
            Command.create({
                'name': _("Maternity Leaves Salary - Net"),
                'sequence': 370,
                'code': 'MATERNITY_LEAVES_NET',
                'category_id': self.env.ref('hr_payroll.NET').id,
                'condition_select': 'python',
                'condition_python': 'result = payslip.payment_type == "sick_leaves" and MATERNITY_LEAVE',
                'amount_select': 'code',
                'amount_python_compute': 'result = MATERNITY_LEAVES_GROSS',
            }),
        ]

    @api.model
    def _get_default_journal_id(self, force_company_id=None):
        try_count = 0
        company_id = force_company_id or self.env.company.id
        while True:
            code = 'SLR%s' % (try_count or '')
            domain = [('code', '=', code), ('type', '=', 'general'), ('company_id', '=', company_id)]
            journal = self.env['account.journal'].with_context(active_test=False).search(domain, limit=1)
            if not journal or journal.active:
                break
            try_count += 1
        if not journal:
            journal = self.env['account.journal'].create({
                'name': _("Salaries"),
                'code': code,
                'type': 'general',
                'sequence': 99,
                'company_id': company_id,
            })
        return journal

    rule_ids = fields.One2many(
        default=lambda self: self._get_default_rule_ids(),
        copy=False,
    )

    journal_id = fields.Many2one(
        default=lambda self: self._get_default_journal_id(),
    )

    @api.returns('self', lambda value: value.id)
    def copy(self, default=None):
        default = default or {}
        if not default.get('name'):
            default['name'] = _("%s (copy)", self.name)
        return super().copy(default)

    @api.model_create_multi
    def create(self, vals_list):
        res = super().create(vals_list)
        companies = self.env['res.company'].sudo().search([])
        for company in companies:
            for struct in res:
                company_struct = struct.sudo().with_company(company)
                if (
                    not company_struct.journal_id
                    and (not company_struct.country_id or company_struct.country_id == company.country_id)
                ):
                    company_struct.journal_id = company_struct._get_default_journal_id()
        return res
